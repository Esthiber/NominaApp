// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NominaApp.DAL;

#nullable disable

namespace NominaApp.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NominaApp.Models.Abonos", b =>
                {
                    b.Property<int>("AbonoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AbonoId"));

                    b.Property<double>("Monto")
                        .HasColumnType("float");

                    b.Property<int>("PrestamoId")
                        .HasColumnType("int");

                    b.HasKey("AbonoId");

                    b.HasIndex("PrestamoId");

                    b.ToTable("Abonos");

                    b.HasData(
                        new
                        {
                            AbonoId = 1,
                            Monto = 5000.0,
                            PrestamoId = 1
                        },
                        new
                        {
                            AbonoId = 2,
                            Monto = 4200.0,
                            PrestamoId = 2
                        });
                });

            modelBuilder.Entity("NominaApp.Models.Departamentos", b =>
                {
                    b.Property<int>("DepartamentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartamentoId"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartamentoId");

                    b.ToTable("Departamentos");

                    b.HasData(
                        new
                        {
                            DepartamentoId = 1,
                            Nombre = "Recursos Humanos"
                        },
                        new
                        {
                            DepartamentoId = 2,
                            Nombre = "Tecnología"
                        },
                        new
                        {
                            DepartamentoId = 3,
                            Nombre = "Contabilidad"
                        },
                        new
                        {
                            DepartamentoId = 4,
                            Nombre = "Ventas"
                        });
                });

            modelBuilder.Entity("NominaApp.Models.Empleados", b =>
                {
                    b.Property<int>("EmpleadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmpleadoId"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int>("DepartamentoId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Profesion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Puesto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Sueldo")
                        .HasColumnType("float");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("EmpleadoId");

                    b.HasIndex("DepartamentoId");

                    b.ToTable("Empleados");

                    b.HasData(
                        new
                        {
                            EmpleadoId = 1,
                            Apellido = "Perez",
                            Cedula = "00123456789",
                            DepartamentoId = 2,
                            Nombre = "Juan",
                            Profesion = "Analista",
                            Puesto = "Desarrollador",
                            Sueldo = 50000.0,
                            Telefono = "8095551234"
                        },
                        new
                        {
                            EmpleadoId = 2,
                            Apellido = "Gomez",
                            Cedula = "00234567891",
                            DepartamentoId = 3,
                            Nombre = "Maria",
                            Profesion = "Contadora",
                            Puesto = "Contadora Senior",
                            Sueldo = 60000.0,
                            Telefono = "8095555678"
                        },
                        new
                        {
                            EmpleadoId = 3,
                            Apellido = "Lopez",
                            Cedula = "00345678912",
                            DepartamentoId = 4,
                            Nombre = "Carlos",
                            Profesion = "Vendedor",
                            Puesto = "Ejecutivo de Ventas",
                            Sueldo = 45000.0,
                            Telefono = "8095558765"
                        },
                        new
                        {
                            EmpleadoId = 4,
                            Apellido = "Fernandez",
                            Cedula = "00456789123",
                            DepartamentoId = 1,
                            Nombre = "Ana",
                            Profesion = "Recursos Humanos",
                            Puesto = "Coordinadora",
                            Sueldo = 55000.0,
                            Telefono = "8095552345"
                        },
                        new
                        {
                            EmpleadoId = 5,
                            Apellido = "Martinez",
                            Cedula = "00567891234",
                            DepartamentoId = 2,
                            Nombre = "Pedro",
                            Profesion = "Analista",
                            Puesto = "QA",
                            Sueldo = 52000.0,
                            Telefono = "8095559876"
                        },
                        new
                        {
                            EmpleadoId = 6,
                            Apellido = "Jimenez",
                            Cedula = "00678912345",
                            DepartamentoId = 4,
                            Nombre = "Laura",
                            Profesion = "Vendedor",
                            Puesto = "Vendedor",
                            Sueldo = 42000.0,
                            Telefono = "8095553456"
                        },
                        new
                        {
                            EmpleadoId = 7,
                            Apellido = "Torres",
                            Cedula = "00789123456",
                            DepartamentoId = 3,
                            Nombre = "Diego",
                            Profesion = "Contador",
                            Puesto = "Asistente Contable",
                            Sueldo = 38000.0,
                            Telefono = "8095556543"
                        },
                        new
                        {
                            EmpleadoId = 8,
                            Apellido = "Castro",
                            Cedula = "00891234567",
                            DepartamentoId = 1,
                            Nombre = "Sofia",
                            Profesion = "Recursos Humanos",
                            Puesto = "Especialista",
                            Sueldo = 50000.0,
                            Telefono = "8095557654"
                        },
                        new
                        {
                            EmpleadoId = 9,
                            Apellido = "Guzman",
                            Cedula = "00912345678",
                            DepartamentoId = 2,
                            Nombre = "Fernando",
                            Profesion = "Desarrollador",
                            Puesto = "Backend Developer",
                            Sueldo = 70000.0,
                            Telefono = "8095558765"
                        },
                        new
                        {
                            EmpleadoId = 10,
                            Apellido = "Ortiz",
                            Cedula = "01023456789",
                            DepartamentoId = 4,
                            Nombre = "Valentina",
                            Profesion = "Vendedor",
                            Puesto = "Vendedor",
                            Sueldo = 40000.0,
                            Telefono = "8095559876"
                        });
                });

            modelBuilder.Entity("NominaApp.Models.HorasExtra", b =>
                {
                    b.Property<int>("HorasExtraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HorasExtraId"));

                    b.Property<int>("CantidadHoras")
                        .HasColumnType("int");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int");

                    b.Property<bool>("Nocturnas")
                        .HasColumnType("bit");

                    b.Property<bool>("Pagada")
                        .HasColumnType("bit");

                    b.HasKey("HorasExtraId");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("HorasExtras");

                    b.HasData(
                        new
                        {
                            HorasExtraId = 1,
                            CantidadHoras = 10,
                            EmpleadoId = 1,
                            Nocturnas = false,
                            Pagada = false
                        },
                        new
                        {
                            HorasExtraId = 2,
                            CantidadHoras = 8,
                            EmpleadoId = 3,
                            Nocturnas = false,
                            Pagada = true
                        });
                });

            modelBuilder.Entity("NominaApp.Models.PagosNomina", b =>
                {
                    b.Property<int>("PagoNominaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PagoNominaId"));

                    b.Property<double>("Descuentos")
                        .HasColumnType("float");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<double>("SueldoBruto")
                        .HasColumnType("float");

                    b.Property<double>("SueldoNeto")
                        .HasColumnType("float");

                    b.HasKey("PagoNominaId");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("PagosNomina");

                    b.HasData(
                        new
                        {
                            PagoNominaId = 1,
                            Descuentos = 8000.0,
                            EmpleadoId = 1,
                            Fecha = new DateTime(2025, 2, 27, 21, 59, 7, 230, DateTimeKind.Local).AddTicks(9431),
                            SueldoBruto = 50000.0,
                            SueldoNeto = 42000.0
                        },
                        new
                        {
                            PagoNominaId = 2,
                            Descuentos = 10000.0,
                            EmpleadoId = 2,
                            Fecha = new DateTime(2025, 2, 27, 21, 59, 7, 231, DateTimeKind.Local).AddTicks(678),
                            SueldoBruto = 60000.0,
                            SueldoNeto = 50000.0
                        });
                });

            modelBuilder.Entity("NominaApp.Models.Prestamos", b =>
                {
                    b.Property<int>("PrestamoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrestamoId"));

                    b.Property<int>("Cuotas")
                        .HasColumnType("int");

                    b.Property<int>("EmpleadoId")
                        .HasColumnType("int");

                    b.Property<double>("Monto")
                        .HasColumnType("float");

                    b.Property<bool>("Pagado")
                        .HasColumnType("bit");

                    b.HasKey("PrestamoId");

                    b.HasIndex("EmpleadoId");

                    b.ToTable("Prestamos");

                    b.HasData(
                        new
                        {
                            PrestamoId = 1,
                            Cuotas = 24,
                            EmpleadoId = 2,
                            Monto = 100000.0,
                            Pagado = false
                        },
                        new
                        {
                            PrestamoId = 2,
                            Cuotas = 12,
                            EmpleadoId = 4,
                            Monto = 50000.0,
                            Pagado = false
                        });
                });

            modelBuilder.Entity("NominaApp.Models.Abonos", b =>
                {
                    b.HasOne("NominaApp.Models.Prestamos", "Prestamo")
                        .WithMany("Abonos")
                        .HasForeignKey("PrestamoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prestamo");
                });

            modelBuilder.Entity("NominaApp.Models.Empleados", b =>
                {
                    b.HasOne("NominaApp.Models.Departamentos", "Departamento")
                        .WithMany("Empleados")
                        .HasForeignKey("DepartamentoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("NominaApp.Models.HorasExtra", b =>
                {
                    b.HasOne("NominaApp.Models.Empleados", "Empleado")
                        .WithMany("HorasExtras")
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("NominaApp.Models.PagosNomina", b =>
                {
                    b.HasOne("NominaApp.Models.Empleados", "Empleado")
                        .WithMany("PagosNomina")
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("NominaApp.Models.Prestamos", b =>
                {
                    b.HasOne("NominaApp.Models.Empleados", "Empleado")
                        .WithMany("Prestamos")
                        .HasForeignKey("EmpleadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");
                });

            modelBuilder.Entity("NominaApp.Models.Departamentos", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("NominaApp.Models.Empleados", b =>
                {
                    b.Navigation("HorasExtras");

                    b.Navigation("PagosNomina");

                    b.Navigation("Prestamos");
                });

            modelBuilder.Entity("NominaApp.Models.Prestamos", b =>
                {
                    b.Navigation("Abonos");
                });
#pragma warning restore 612, 618
        }
    }
}
